button {
  border-radius: 10px;
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
  font-size: 1.1rem;
  cursor: pointer;
}

.btns {
  margin-top: 4rem;
  display: flex;
  justify-content: center;
  z-index: 100;
  position: relative;

  :last-child {
    margin-left: 2rem;
    text-align: center;
    width: auto;
  }
}

//FillBUtton
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--hover);
}

.fill:active {
  box-shadow: 4px 4px 6px 0 rgba(255, 255, 255, 0.3),
  -4px -4px 6px 0 rgba(116, 125, 136, 0.2),
  inset -4px -4px 6px 0 rgba(255, 255, 255, 0.2),
  inset 4px 4px 6px 0 rgba(0, 0, 0, 0.2);
}

.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

.raise:active {
  transform: translateY(0.25em);
  box-shadow: 4px 4px 6px 0 rgba(255, 255, 255, 0.3),
  -4px -4px 6px 0 rgba(116, 125, 136, 0.2),
  inset -4px -4px 6px 0 rgba(255, 255, 255, 0.2),
  inset 4px 4px 6px 0 rgba(0, 0, 0, 0.2);
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
// Make a map with the class names and matching colors
$colors: (
        fill: #a972cb,
        pulse: #ef6eae,
        close: #ff7f82,
        raise: #ffa260,
        up: #e4cb58,
        slide: #8fc866,
        offset: #19bc8b,
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
// Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {
  color: var(--color);
  transition: 0.25s;

  &:hover,
  &:focus {
    border-color: var(--hover);
    color: #fff;
  }
}
